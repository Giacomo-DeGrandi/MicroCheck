

/*

package com.example.microcheck

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.microcheck.ui.theme.MicroCheckTheme
import android.content.Intent
import android.net.VpnService
import android.app.Activity
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.ui.Alignment
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp


class MainActivity : ComponentActivity() {

    // set const for VPN_REQUEST_CODE
    private val VPN_REQUEST_CODE = 1
    // set variable
    private lateinit var requestPermissionLauncher: ActivityResultLauncher<Intent?>

    override fun onCreate(savedInstanceState: Bundle?) {

        super.onCreate(savedInstanceState)

        val vpnPermissionResult = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                // Start the MyVpnService here.
                startService(Intent(this, MyVpnService::class.java))
            } else {
                // Notify the user about the denial.
                Toast.makeText(this, "VPN permission denied.", Toast.LENGTH_SHORT).show()
            }
        }


        fun requestVpnPermission() {
            val vpnIntent = VpnService.prepare(this)
            if (vpnIntent != null) {
                vpnPermissionResult.launch(vpnIntent)
            } else {
                startService(Intent(this, MyVpnService::class.java))
            }
        }


        setContent {
            MicroCheckTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    MainScreen(onStartMonitoringClick = { requestVpnPermission() })
                }
            }
        }

    }
}

@Composable
fun MainScreen(onStartMonitoringClick: () -> Unit) {
    Column(
        modifier = Modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "MicroCheck", fontSize = 24.sp, fontWeight = FontWeight.Bold)
        Spacer(modifier = Modifier.height(24.dp))
        Text(text = "Check for potential threats by monitoring network traffic.")
        Spacer(modifier = Modifier.height(24.dp))
        Button(onClick = { onStartMonitoringClick.invoke() }) {
            Text(text = "Start Monitoring")
        }
    }
}


@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    MicroCheckTheme {
        MainScreen(onStartMonitoringClick = { /* dummy implementation for preview */ })
    }
